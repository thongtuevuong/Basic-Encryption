import numpy as np

num2let = {0:'a',1:'b',2:'c',3:'d',4:'e',5:'f',6:'g',7:'h',8:'i',9:'j',10:'k',11:'l',12:'m',13:'n',14:'o',15:'p',16:'q',17:'r',18:'s',19:'t',20:'u',21:'v',22:'w',23:'x',24:'y',25:'z',26:' ',27:'.',28:',',29:';'}

let2num = {'a':0,'b':1,'c':2,'d':3,'e':4,'f':5,'g':6,'h':7,'i':8,'j':9,'k':10,'l':11,'m':12,'n':13,'o':14,'p':15,'q':16,'r':17,'s':18,'t':19,'u':20,'v':21,'w':22,'x':23,'y':24,'z':25,' ':26,'.':27,',':28,';':29}

def word2list(sen):
    sen = sen.lower()
    new =[]
    for i in sen: 
    	new = new + [let2num[i]]
    return new 
# print(word2list('Hello'))

def list2word(list_num):
    sen = ''
    for i in list_num:
        sen = sen + num2let[i]
    return sen


##2: SHIFT CIPHER

def shift_cipher():
    sen = str(input("Write sentence: "))
    shift = int(input('Choose shift value: '))
    encpt = ''
    for i in sen:
        index = let2num[i] 
        if i == ';' or i == '.' or i == ';':
            encpt += num2let[index] #convert it back to .;,
        else:
            num = (index + shift) % 27
            encpt= encpt + num2let[num] #transliterate the others
    return encpt

## 3: VIGENERE CIPHER:
def vigenere_cipher():
    sen = (str(input("Write sentence: "))).lower() 
    #test: howard hastily hoisted his happy halloween harold now hovering high overhead his house
    key = str(input("Write keywords: ")).lower()
    #key test: skeleton
    encpt= ""
    slit_mess = [sen[i:i + len(key)]for i in range(0, len(sen), len(key))] #slit the sentence into sequence with len(key_word)
    for each in slit_mess:
        for letter in each:
            index= let2num[letter]
            j = 0 
            if letter == "." or letter == "," or letter ==";":
                encpt += num2let[index]    
            else:
                num = (let2num[letter] + let2num[key[j]]) % 27
                encpt =  encpt + num2let[num]
                j+=1
    return encpt

print(vigenere_cipher())
def inverse_key():
    key = str(input("Write keywords: ")).lower()
    ikey = []
    for i in key:
        if i == ';' or i == '.' or i == ';':
            return ('Should have no the skipped characters (";"),(","),(".")')
        else:
            ikey.append((27 - let2num[i])%27)
    return list2word(ikey) 

    ##use the above function to transliterate list to string
#inverse key of skeleton is jrxqxino


##4: Find GCD with Euclidean algorithm

def eucli_algorithm(num1, num2, twice):
    x0, y0 = 1,0
    x1,y1 = 0,1
    # num1, num2 = abs(num1),abs(num2)
    if num2 == 0: 
        return num1
    else:  
        while True: 
            r = int(num1 % num2)
            if r !=0:
                q = num1 // num2
                num1 = num2
                num2 = r
                x2 = x1
                x1 = x0 - q*x1 
                y2 = y1 
                y1 = y0 - q*y1
                x0 = x2
                y0 = y2
            else: 
                break

    if twice == 0:
        return "GCD is " +  str(num2) 
    else: 
        return (x1,y1,abs(num2))


##5: Affine cipher1

def affine_cipher(): 
    sen = (str(input("Sentence: "))).lower()
    mcoe = int(input("Multiplication Coefficient: "))
    shift = int(input('Shift values: '))
    #E(x)= ax+b ##
    new = ""
    for i in sen: 
        index = let2num[i]
        num = (mcoe*index + shift) % 27
        new = new + num2let[num]
    return new

# Multiplication coefficient must be larger than 1 because if it is 0, the affine cipher will not work, and if it is 1, the affine cipher will become a shift cipher - special case for affine cipher 

# Test: howard hastily hoisted his happy halloween harold now hovering high overhead his house with (5,3)

def inverse_affine():
    encpt = str(input('The encrypted message: '))
    mcoe= int(input("Multiplication coeffiencient: "))
    shift = int(input('Choose shift value: '))

    inverse_mcoe,y1, gcd = eucli_algorithm(mcoe, 27,1)
    decrypt = ""
    if gcd ==1: 
        for i in encpt: 
            num = let2num[i]
            index = ((num - shift) * inverse_mcoe) % 27
            decrypt = decrypt + num2let[index]
            return decrypt
    else: 
        return ('Cannot decrypt because no inverse modulo exists')
    

##6: 
# Block cipher: 

def inverse_check(matrix):
    det =  np.linalg.det(matrix)
    o1,o2,gcd = eucli_algorithm(det,matrix,1)
    if det == 0 and gcd !=1: ##det != 0, gcd (det,27) = 1 to have invertiable matrix mod 27
        return False

## A 2x2 coefficient matrix A mod n is invertible when det(A) != 0 and the gcd (det,n) = 1, so its inverse exists. 
#A^-1 = 1/det(A) * adj(A) mod 27
#inverse det A mod 27 can be found by using the euclidean algorithm

# matrix A * matrix B --> not commutative A: (num,dim1) and B: (dim1, 1)

##convert the list of numbers into a matrix

def fill_matrix(sen, smatrix,key):
    dim = smatrix.shape[1]
    if len(sen) % dim !=0: 
## check if the length of message is not a multiple of block, so dummy char will be used for that
        while True: 
            sen = sen + key
            if len(sen) % dim == 0: 
                break
    numlis = word2list(sen)
    m3=[numlis[i:i+dim] for i in range(0,len(numlis),dim)]
    return m3

def block_cipher(smatrix, shift_vec):
    # if inverse_check(smatrix) == True:
    sen = str(input('Your message for encryption: '))
        
    dummy_str = str(input("Type the dummy string: "))
        
    sen2matrix = fill_matrix(sen,smatrix,dummy_str)
    fi_matrix = []
    for j in sen2matrix:
            #matrix multiplication (numpy) and addition with shift vector
        m4 = (np.matmul(smatrix,np.array(j).T)+shift_vec) % 27
            
        fi_matrix += [i for i in m4] #put it back in a list of numbers 
    new = list2word(fi_matrix)
    return new


m = np.array([[1,0],[0,1]])

shift = np.array([23,23])

# b= 'howard hastily hoisted his happy halloween harold now hovering high overhead his house' --> test the encryption
print(block_cipher(m,shift))

def decryption_blockcipher(smatrix,shift):
    encpt = str(input('Your message for decryption: '))
    dim = smatrix.shape [1]
    numlis = word2list(encpt)
    
    det = round(np.linalg.det(smatrix))
    adj = np.round(np.linalg.inv(smatrix) * det).astype(int)
    inverse_det,y1, gcd = eucli_algorithm(det, 27,1)
    m3=[numlis[i:i+dim] for i in range(0,len(numlis),dim)]
    fi_matrix = []
    if gcd ==1:
        
        inver_matrix = (adj * inverse_det) % 27
        for j in m3:
            #matrix multiplication (numpy) and addition with shift vector
            m4 = (np.matmul(inver_matrix,np.array(j-shift).T)) %27
            fi_matrix += [round(i) for i in m4]
        decrypt = list2word(fi_matrix)
        return decrypt
